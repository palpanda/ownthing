def tfpca(image,stepsize,windowsize):
#
    sess = tf.Session()
    sess.run(tf.global_variables_initializer())
    npim = image.eval(session=sess)
    npeg = get_eg(npim,stepsize,windowsize)
    tfeg= sess.run(npeg)
    tfeg=tf.convert_to_tensor(tfeg)
    return tfeg
    
def sliding_window(image, stepSize, windowSize):
    b,h,w,c= image.shape
    for y in range(0, h, stepSize[1]):
        for x in range(0, w, stepSize[0]):
            # yield the current window
            yield (x, y, image[y:y + windowSize[1], x:x + windowSize[0]])   
    
    
    
def get_eg(image, stepSize, windowSize):
    slice_sets = []
    pointsx = [] 
    pointsy = []
    thresh1 = []
    b,h,w,c = image.shape
    for z in range(0,c,1):
     for (x, y, window) in sliding_window(image, stepSize, windowSize):    
            egv=numpy.linalg.norm(egval)
            slice_sets.append(egv)
            
    return slice_sets
    
    
    
class PCA2D(tf.keras.layers.Layer):


  def __init__(self, tfpca, pool_size, strides,
               padding='valid', data_format=None,
               name=None,use_bias=False,activation=None, **kwargs):
    super(PCA2D, self).__init__(name=name, **kwargs)
    if data_format is None:
      data_format = backend.image_data_format()
    if strides is None:
      strides = pool_size
    self.tfpca = tfpca
    self.pool_size = pool_size
    self.strides = strides
    self.padding = conv_utils.normalize_padding(padding)
    self.data_format = conv_utils.normalize_data_format(data_format)
    self.input_spec = InputSpec(ndim=2)
    self.activation = tf.keras.activations.get(activation)
    self.use_bias = use_bias

  def call(self, inputs):

    outputs = self.tfpca(
        self.inputs,
        self.strides,
        self.pool_size)
    return outputs

  def compute_output_shape(self, input_shape):
      return (input_shape[-1], self.output_dim)
